<style lang="less" scoped>
    .room-bg {
        height: 100vh;
        width: 100vw;
        overflow: hidden;
		position: relative;
    }
    .bg-img {
        height: 100vh;
        width: 100vw;
        position: absolute;
        top: 0;
        left: 0;
        z-index: 0;
    }
    .room-content {
        height: 100vh;
        width: 100vw;
        position: absolute;
        top: 0;
        left: 0;
		z-index: 2;
    }
    .room-bottom {
        position: absolute;
        bottom: 0;
        width: 100vw;
        height: 50px;
        margin-bottom: constant(safe-area-inset-bottom);
        /* 兼容 iOS < 11.2 */
        margin-bottom: env(safe-area-inset-bottom);
        /* 兼容 iOS >= 11.2 */
    }
    .chatroom {
        width: 50vw;
        max-height: 30vh;
        position: absolute;
        bottom: 120px;
        z-index: 100;
		padding: 22rpx;
		overflow: hidden;
    }
    .gifts,
    .goodslist,
    .introduction,
	.online-user,
	.user-card {
        position: absolute;
        width: 100vw;
        height: 45vh;
        background-color: #fff;
        bottom: -45vh;
        z-index: 800;
        left: 0;
	}
	.user-card {
		background-color: unset;
	}
    .gift-animation {
        position: absolute;
        top: 30vh;
        left: 20rpx;
    }
    .coupon {
        margin-top: 400rpx;
    }
    .live-player {
        width: 100vh;
        height: 100vw;
        background-color: #fff;
    }
    .notice {
        position: absolute;
        left: 20rpx;
        bottom: 50vh;
        max-width: 60vw;
    }
</style>

<template>
    <view class="room-bg">
        <view class="room-content">
            <!-- 头部 start -->
            <room-header :userInfo="userInfo" @attention="attention" @cancel-attention="cancelAttention" :groupinfo="groupInfo" :ownerInfo="ownerInfo" @show-user-card="showUserCard" @coupon="coupon" @show-introduction="showIntroduction" @show-online-user="showOnlineUser"></room-header>
            <!-- 头部 end -->
            <!-- 聊天室 start -->
            <chatroom class="chatroom" :message="messageQueen"></chatroom>
            <!-- 聊天室 end -->
            <!-- 底部 -->
            <room-bottom class="room-bottom" @send-message="sendMessage" isTimReady="{{isTimReady}}" @quitGroup="quitGroup" @like="like" @showGift="showGift" @showgoods="showgoods"></room-bottom>
            <!-- 底部 -->
            <!-- 礼物面板 start -->
            <gifts class="gifts" :animation="animation" @hideGift="hideGift" @sendgift="sendgift"></gifts>
            <!-- 礼物面板 end -->
            <!-- 商品面板 start -->
            <goods-list class="goodslist" :animation="animation2" @hidegoods="hidegoods" @buy="buy" :goods="goods"></goods-list>
            <!-- 商品面板 end -->
            <!-- 礼物以及动画 start -->
            <gift-animation wx:if="{{hasgift}}" class="gift-animation" avatar="{{giftAvatar}}" nick="{{giftNick}}" @hideani="hideani"></gift-animation>
            <!-- 礼物以及动画 end -->
            <!-- 直播间简介 start -->
            <introduction :animation="animation3" @hide-introduction="hideIntroductione" :groupinfo="groupInfo" class="introduction"></introduction>
            <!-- 直播间简介 end -->
            <!-- 用户卡片 start -->
            <user-card v-if="isShowUserCard" :animation="animationUserCard" @hide-user-card="hideUserCard" :userCardId="userCardId" class="user-card"></user-card>
            <!-- 用户卡片 end -->
            <!-- 在线用户卡片 start -->
            <online-user wx:if="{{isShowOnlineUser}}" :animation="animation4" @hide-online-user="hideOnlineUser" @show-user-card="showUserCard" :groupinfo="groupInfo" class="online-user"></online-user>
            <!-- 在线用户卡片 end -->
            <!-- 优惠券 -->
            <coupon class="coupon" wx:if="{{hascoupon}}" @hidecoupon="hidecoupon" @usecoupon="usecoupon"></coupon>
            <!-- 优惠券 -->
            <!-- 公告start -->
            <!-- <notice class="notice" :noticeText="noticeText" v-if="roomStatus!=='0'"></notice> -->
            <!-- 公告 end -->
        </view>
        <live-player src="rtmp://www.imfaker.cn/live/live_demo_prod" v-if="roomStatus!=='0'" mode="RTC" autoplay bindstatechange="statechange" binderror="error" style="width: 100vw; height: 100vh" id="video-livePusher" beauty="9" object-fit="fillCrop" whiteness="9"
            class="live-player" />
        <no-owner v-else :ownerInfo="ownerInfo"></no-owner>
        <!-- <image v-if="roomCover" :src="roomCover" class="bg-img" /> -->
        <!-- <view wx:else></view> -->
    </view>
</template>

<script>
    import wepy from '@wepy/core'
    import TIM from 'tim-wx-sdk';
    import TLS from 'im-live-sells'
    // import TLS from '@/common/tls.min.js'
    // import TLS from '../../../../im-live-sells'
	import CONST from '@/common/const'
	import Model from '@/model'
	import store from '@/store'
    import { ADD_FOLLOWER, REDUCE_FOLLOWER, RESET_FOLLOWER } from '@/store/types'

    const SDKAppID = CONST.IMSDKAPPID
    const app = getApp()
    
    wepy.page({
		store,
        data: {
            userSig: '',
            roomId: '',
            SDKAppID: SDKAppID,
            roomCover: '',
            liveComponent: null, 
            message: [],
            isTimReady: false,
            userInfo: {},
            groupInfo: {},
			ownerInfo: {},
			userCardId: '', // 当前
            animation: null,
            animation2: null,
            animation3: null,
			animation4: null,
			animationUserCard: null,
			isShowUserCard: false,
            isShowOnlineUser: false,
            hasgift: false,
            giftAvatar: '',
            giftNick: '',
            hascoupon: false,
            giftStack: [],
            couponStack: [],
            goods: [],
            noticeText: '',
            roomStatus: '0',
            isShowIntroduction: false
        },
        mixins: [],
        computed: {
            messageQueen: function () {
                const queenLen = 100 //内存里面放100条消息，以免观看直播太久撑爆内存
                if (this.message.length > queenLen) {
                    const vl = this.message.length - queenLen
                    for (let i = 0; i < vl; i++) {
                        this.message.shift()
                    }
                }
                return this.message
            }
        },
        watch: {
        },
        methods: {
            statechange() {},
            initTimLiveSell() {
                this.$app.tls = this.tls = new TLS({
                    SDKAppID: this.SDKAppID,
                    // roomID: this.roomId,
                    userSig: this.userSig,
                    userName: app.userData.id,
                    TIM: TIM
                })
                this.tls.on(TLS.EVENT.SDK_READY, async() => {
                    console.log('SDK 已经初始化好了',Math.random())
                    this.isTimReady = true
                    //sdk可用了
                    const {
                        groupInfo,
                        userInfo
                    } = await this.tls.joinRoom({
                        roomID:this.roomId,
                        getOwnerInfo:true
                    })
                    this.userInfo = userInfo
                    this.groupInfo = groupInfo
                    this.ownerInfo = groupInfo.ownerInfo
                    this.noticeText = groupInfo.notification
                    let goods
                    try {
                        goods = JSON.parse(this._getVarsByKey(groupInfo.groupCustomField, 'addgoods'))
                    } catch (err) {
                        goods = []
                    }
                    this.goods = goods
                    if (this.noticeText) {
                        let msg = []
                        msg.push({
                            name: '公告',
                            message: this.noticeText,
                            id: `id${Date.now()}`,
                            type: 2
                        })
                        this.message = this.message.concat(msg)
					}
                })
                this.tls.on(TLS.EVENT.JOIN_GROUP, async(data) => {
                    console.log('已经加入了群聊',Math.random())
                    //有人加群
                    let msg = []
                    msg.push({
                        name: this._formatNick(data.userID, data.nick),
                        message: '加入了群聊',
                        id: `id${Date.now()}`
                    })
                    this.message = this.message.concat(msg)
                })
                this.tls.on(TLS.EVENT.ERROR, async(data) => {
                })
                this.tls.on(TLS.EVENT.EXIT_GROUP, async(data) => {
                    //有人退群
                    let msg = []
                    msg.push({
                        name: this._formatNick(data.userID, data.nick),
                        message: '退出了群聊',
                        id: `id${Date.now()}`
                    })
                    this.message = this.message.concat(msg)
                })
                this.tls.on(TLS.EVENT.NOTIFACATION, async(data) => {
                    //有新的公告
                    this.noticeText = data.notification
                    let msg = []
                    msg.push({
                        name: '公告',
                        message: this.noticeText,
                        id: `id${Date.now()}`,
                        type: 2
                    })
                    this.message = this.message.concat(msg)
                })
                // 群名和群资料变更
                this.tls.on(TLS.EVENT.INTRODUCTION, async({ name, introduction }) => {
					const msg = []					
					
                    msg.push({
                        name: '公告',
                        message: '群资料变更，请注意查看',
                        id: `id${Date.now()}`,
                        type: 2
                    })

					this.message = this.message.concat(msg)
					this.groupInfo = Object.assign(this.groupInfo, { name, introduction })
				})
				
                this.tls.on(TLS.EVENT.MESSAGE, async(data) => {
                    //有人发消息
                    let msg = []
                    msg.push({
                        name: this._formatNick(data.userID, data.nick),
                        message: data.message,
                        id: `id${Date.now()}`
                    })
                    this.message = this.message.concat(msg)
                })
                this.tls.on(TLS.EVENT.LIKE, async(data) => {
                    //有人给主播点赞
                    let msg = []
                    msg.push({
                        name: this._formatNick(data.userID, data.nick),
                        message: '给主播点赞了',
                        id: `id${Date.now()}`
                    })
                    this.message = this.message.concat(msg)
                })
                this.tls.on(TLS.EVENT.SEND_GIFT, async(data) => {
                    //有人给主播送礼
                    let msg = []
                    msg.push({
                        name: this._formatNick(data.userID, data.nick),
                        message: '给主播送礼了',
                        id: `id${Date.now()}`
                    })
                    this.message = this.message.concat(msg)
                    this.hasgift = true
                    this.giftAvatar = data.avatar
                    this.giftNick = data.nick
                })
                this.tls.on(TLS.EVENT.ATTENTION, async(data) => {
                    //有人关注了主播
                    let msg = []
                    msg.push({
                        name: this._formatNick(data.userID, data.nick),
                        message: '关注了主播',
                        id: `id${Date.now()}`
                    })
					this.message = this.message.concat(msg)
					this.$store.dispatch({ type: ADD_FOLLOWER })
                    // const a = await this.tls.getUserInfo()
				})
				this.tls.on(TLS.EVENT.CANCELATTENTION, async(data) => {
                    //有人关注了主播
                    let msg = []
                    msg.push({
                        name: this._formatNick(data.userID, data.nick),
                        message: '取消关注关注了主播',
                        id: `id${Date.now()}`
                    })
					this.message = this.message.concat(msg)
					this.$store.dispatch({ type: REDUCE_FOLLOWER })
                    // const a = await this.tls.getUserInfo()
                })
                this.tls.on(TLS.EVENT.BUY_GOODS, async(data) => {
                    //有人购买了商品
                    let msg = []
                    msg.push({
                        name: this._formatNick(data.userID, data.nick),
                        message: `购买了商品（${JSON.parse(data.value).name}）`,
                        id: `id${Date.now()}`
                    })
                    this.message = this.message.concat(msg)
                })
                this.tls.on(TLS.EVENT.USE_COUPON, async(data) => {
                    //有人领了优惠券
                    let msg = []
                    msg.push({
                        name: this._formatNick(data.userID, data.nick),
                        message: '领取了优惠券',
                        id: `id${Date.now()}`
                    })
                    this.message = this.message.concat(msg)
                })
                this.tls.on(TLS.EVENT.ADD_GOODS, async(data) => {
                    //该场直播推荐商品有变更
                    wx.showToast({
                        title: '有新的商品上架'
                    })
                    let goods
                    try {
                        goods = JSON.parse(data.value)
                    } catch (err) {
                        goods = []
                    }
                    this.goods = goods
                })
                this.tls.on(TLS.EVENT.KICKED, async() => {
                    //被踢下线
                })
                this.tls.on(TLS.EVENT.NETWORK_CHANGE, async() => {
                    //网络变化
                })
                this.tls.on(TLS.EVENT.SDK_NOT_READY, async() => {
                    //sdk不可用
                })
                this.tls.on(TLS.EVENT.PROFILE_UPDATE, async() => {
                    //用户资料发生改变
                })
                this.tls.on(TLS.EVENT.ERROR, async() => {
                    //sdk发生错误
                })
            },
            hidecoupon() {
                this.hascoupon = false
                setTimeout(() => {
                    if (this.couponStack.shift()) {
                        this.hascoupon = true
                    }
                }, 1000)
            },
            usecoupon() {
                this.tls.useCoupon().then((data) => {
                    this.hidecoupon()
                })
            },
            coupon() {
                this.hascoupon = true
            },
            _formatNick(userID, nick) {
                if (userID === this.userInfo.userID) {
                    return '我'
                }
                return nick
            },
            buy(data) {
                wx.showLoading()
                this.tls.buy(data).then(() => {
                    wx.hideLoading()
                    this.hidegoods()
                })
            },
            hideani() {
                this.hasgift = false,
                    this.giftAvatar = '',
                    this.giftNick = ''
                setTimeout(() => {
                    var msg = this.giftStack.shift()
                    if (msg) {
                        this.hasgift = true,
                            this.giftAvatar = msg.giftAvatar,
                            this.giftNick = msg.giftNick
                    }
                }, 1000)
            },
            showgoods() {
                const ani = wx.createAnimation({
                    duration: 200
                })
                ani.bottom(0).step()
                this.animation2 = ani.export()
            },
            hidegoods() {
                const ani = wx.createAnimation({
                    duration: 200
                })
                ani.bottom('-45vh').step()
                this.animation2 = ani.export()
            },
            showGift() {
                const ani = wx.createAnimation({
                    duration: 200
                })
                ani.bottom(0).step()
                this.animation = ani.export()
            },
            showIntroduction() {
              const ani = wx.createAnimation({
                  duration: 200
              })
              ani.bottom(0).step()
              this.animation3 = ani.export()
            },
            hideIntroductione() {
                const ani = wx.createAnimation({
                    duration: 200
                })
                ani.bottom('-45vh').step()
                this.animation3 = ani.export()
            },
            showOnlineUser() {
			  	this.isShowOnlineUser = true
				setTimeout(() => {
					const ani = wx.createAnimation({
						duration: 200
					})

					ani.bottom(0).step()
					this.animation4 = ani.export()
				}, 0)
            },
            hideOnlineUser() {
				const duration = 200
                const ani = wx.createAnimation({ duration })
                ani.bottom('-45vh').step()
                
				this.animation4 = ani.export()
				setTimeout(() => {
					this.isShowOnlineUser = false
				}, duration)
			},
			showUserCard({ user_id }) {
				this.isShowUserCard = true
				this.userCardId = user_id
				setTimeout(() => {
					const ani = wx.createAnimation({
						duration: 200
					})
					ani.bottom(0).step()
					
					this.animationUserCard = ani.export()
				}, 0)
				
            },
            hideUserCard() {
				const duration = 200
                const ani = wx.createAnimation({ duration })
                ani.bottom('-45vh').step()
                
				this.animationUserCard = ani.export()
				setTimeout(() => {
					this.isShowUserCard = false
				}, duration)
            },
             sendgift() {
                wx.showModal({
                    title: '提示',
                    content: '确认送礼？',
                    success: async (data) => { 
						try {
							if (data.confirm) {
								await Model.sendGift({
									from_id: this.userInfo.userID,
									to_id: this.groupInfo.ownerID,
									gift_id: 1
								})
								this.tls.sendGift('礼物')
							}
						} catch(e) {
							wx.showToast({ title: e.message })
						} finally {
							this.hideGift();
						}
                    }
                })
            },
            hideGift() {
                const ani = wx.createAnimation({
                    duration: 200
                })
                ani.bottom('-45vh').step()
                this.animation = ani.export()
            },
            async like() {
				try {
					await Model.like({
						from_id: this.userInfo.userID,
						to_id: this.groupInfo.ownerID
					})
					this.tls.like()
				} catch(e) {
					wx.showToast({ title: e.message })
				}
            },
            attention() {
                wx.showLoading()
                this.tls.attention().then((data) => {
                    wx.hideLoading()
                }).catch(() => {
                    wx.hideLoading()
                })
			},
			cancelAttention() {
                wx.showLoading()
                this.tls.cancelAttention().then((data) => {
                    wx.hideLoading()
                }).catch(() => {
                    wx.hideLoading()
                })
            },
            quitGroup() {
                wx.showLoading({
                    mask: true
                })
                this.tls.exitRoom().then(() => {
                    wx.hideLoading()
                    wx.navigateBack()
                    this.isTimReady = false
                }).catch((err) => {
                    wx.navigateBack()
                })
            },
            _getVarsByKey(arr, key) {
                var res
                for (var i = 0; i < arr.length; i++) {
                    if (arr[i].key === key) {
                        res = arr[i].value;
                        break;
                    }
                }
                return res
            },
            sendMessage(data) {
                this.tls.sendMessage(data).then((res) => {
                    this.message = this.message.concat([{
                        name: this._formatNick(this.userInfo.userID, this.userInfo.nick),
                        message: res.message,
                        id: `id${Date.now()}`
                    }])
                })
            },
            getUserSig() {
                wx.request({
                    url: `${CONST.HOST}/getUserSig`,
                    method: 'GET',
                    header: {
                        "content-type": "application/x-www-form-urlencoded"
                    },
                    data: {
                        userId: app.userData.id
                    },
                    success: (data) => {
                        this.userSig = data.data.userSig
                        this.initTimLiveSell()
                    },
                    fail() {}
                })
			},
			// TODO：临时加入，为了能直接进入直播间
			async auth() {
				try {
					this.loading = true
					const { code } = await wepy.wx.login();
					const res = await wepy.wx.request({
						url: `${CONST.HOST}/getUser`,
						method: 'POST',
						header: {
							"content-type": "application/x-www-form-urlencoded"
						},
						data: { code }
					})
					if (res.statusCode === 200) {
						if (res.data.code == -2) {
							this.isLogin = false
						} else {
							this.userData = app.userData = res.data
						}
					} else {
						throw new Error('登录失败')
					}
				} catch(e) {
					this.loading = false
					return Promise.reject(e.message)
				}
			}
    },

    async onLoad(data) {
		try {
			this.roomId = data.im_id
			this.roomCover = data.room_cover
			this.roomStatus = data.room_status
			await this.auth()
			this.getUserSig()
		} catch(e) {
			console.warn(e)
		}
        
    },

    onUnload() {
        this.tls.destroy()
        this.tls = null
        this.message = []
    },
    
    events: {}
  })
</script>

<config>
{
    navigationBarTitleText: '房间1',
    navigationStyle: 'custom',
    disableScroll: true,
    usingComponents: {
      'room-header':'~@/components/header',
      'room-bottom': '~@/components/bottom',
      'chatroom': '~@/components/chatroom',
      'gifts': '~@/components/gifts',
      'coupon': '~@/components/coupon',
      'notice': '~@/components/notice',
      'goods-list': '~@/components/goodslist',
      'introduction': '~@/components/introduction',
	  'user-card': '~@/components/user-card',
      'online-user': '~@/components/online-user',
      'gift-animation': '~@/components/gift-animation',
      'no-owner': '~@/components/noowner'
    }
}
</config>